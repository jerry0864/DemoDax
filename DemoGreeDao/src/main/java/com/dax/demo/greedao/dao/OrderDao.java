package com.dax.demo.greedao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.dax.demo.greedao.entity.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Order_id = new Property(0, Long.class, "order_id", true, "_id");
        public final static Property User_id = new Property(1, long.class, "user_id", false, "USER_ID");
        public final static Property Product_name = new Property(2, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Money = new Property(3, double.class, "money", false, "MONEY");
        public final static Property Order_time = new Property(4, String.class, "order_time", false, "ORDER_TIME");
    }

    private Query<Order> user_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: order_id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"PRODUCT_NAME\" TEXT," + // 2: product_name
                "\"MONEY\" REAL NOT NULL ," + // 3: money
                "\"ORDER_TIME\" TEXT);"); // 4: order_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindLong(1, order_id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
        stmt.bindDouble(4, entity.getMoney());
 
        String order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindString(5, order_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindLong(1, order_id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
        stmt.bindDouble(4, entity.getMoney());
 
        String order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindString(5, order_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // order_id
            cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_name
            cursor.getDouble(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // order_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOrder_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getLong(offset + 1));
        entity.setProduct_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney(cursor.getDouble(offset + 3));
        entity.setOrder_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setOrder_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getOrder_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getOrder_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of User. */
    public List<Order> _queryUser_Orders(long user_id) {
        synchronized (this) {
            if (user_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = user_OrdersQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

}
