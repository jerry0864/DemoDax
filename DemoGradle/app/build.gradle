apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.dax.demo.gradle"
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //添加一个字段，是否检查更新升级，默认检查
        //BuildConfig类中生成AUTO_UPDATES布尔常量，默认值为true 用于判断
        buildConfigField "boolean", "AUTO_UPDATES", "true"
    }

    sourceSets {
//        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            resources.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
//        }
//
//        androidTest.setRoot('tests')
    }


    productFlavors {
        wandoujia {
            //用于配置渠道包 不检查更新
            //生成渠道包gradle assembleWandoujia
            buildConfigField "boolean", "AUTO_UPDATES", "false"

            //动态添加包名后缀.也可applicationId "com.dax.demo.gradle.wandoujia"。
            applicationIdSuffix ".wandoujia"

        }
    }

    signingConfigs {
        release {
            storeFile file(project.rootDir.getPath() + "\\keystore_release.jks")
            //storePassword "123456"  
            storePassword pwd

            keyAlias "dax"
            //keyPassword "123456" 
            keyPassword pwd
        }
        debug {
            storeFile file(project.rootDir.getPath() + "\\keystore_debug.jks")
            storePassword "123456"

            keyAlias "dax"  
            keyPassword "123456" 
        }  
    }  
    buildTypes {
		def buildversion ="111"
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
			//Zipalign优化
            zipAlignEnabled true
			// 添加一个字段，控制是否显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
			// 移除无用的resource文件
            shrinkResources true
			
			// 自定义输出配置
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "app_v${defaultConfig.versionName}-channel_${variant.productFlavors[0].name}_release_build_${buildversion}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
        debug{
            applicationIdSuffix ".debug"
            minifyEnabled false
            signingConfig signingConfigs.debug
		}
    }
    //变体过滤。变体Variant：Build Type + Product Flavor = Build Variant
    android.variantFilter { variant ->
       if(variant.buildType.name.equals('release')) {
           variant.getFlavors().each() { flavor ->
               if (flavor.name.equals('blue')) { 
					variant.setIgnore(true);
            }
           }
		}
	}
	//多维渠道组合flavorDimensions：gradle会自动创建组合的构建变体，例如：x86-freeapp-release
//	flavorDimensions "abi", "version"
//    productFlavors {
//        freeapp {
//            dimension "version"
//        }
//        paidapp {
//            dimension "version"
//        }
//        arm {
//            dimension "abi"
//        }
//
//        x86 {
//            dimension "abi"
//        }
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:design:25.0.0'
    testCompile 'junit:junit:4.12'
    compile project(':lib')

	//provided只是编译通过，不打进apk
	//provided 'com.qihoo360.union.sdk:union:1.0'
	//打入渠道包指定的SDK。因为只是特定渠道使用，所以在通用代码中要通过反射判断是否有加载该sdk来使用。
    //qihu360Compile 'com.qihoo360.union.sdk:union:1.0'
}

//当前project的所有任务添加完成后会在配置阶段执行
tasks.whenTaskAdded { task ->
    if(task.name.contains('Proguard')){
        //关闭某些task
        //	task.enabled = false;
        println "======================== "+ task.name
	}
}

//监听每个Task任务的执行时间
class TimingsListener implements TaskExecutionListener, BuildListener {
        private Clock clock
        private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
				//7代表打印7个空格
                printf "%7sms    %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings
    ) {}
}

//添加任务执行时间监听器
//gradle.addListener new TimingsListener()

//--------------------------------------------
//gradle任务执行的阶段介绍
//println 'This is executed during the configuration phase.'
//task configured {
//    println 'This is also executed during the configuration phase.'
//}
//
//task test1 << {
//    println 'This is executed during the execution phase.'
//}
//
//task testBoth {
//    doFirst {
//      println 'This is executed first during the execution phase.'
//    }
//    doLast {
//      println 'This is executed last during the execution phase.'
//    }
//    println 'This is executed during the configuration phase as well.'
//}
//--------------------------------------------
//自定义gradle插件
apply plugin: GreetingPlugin
//这里提供closure 来配置插件提供的greeting script block
greeting {
    message = 'Hi'
    greeter = 'Gradle'
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {//注意我们是如果扩展Project对象的，通过extensions对象创建一个script block：greeting,而这个block关联的是一个对象
        project.extensions.create("greeting", GreetingPluginExtension)
        project.task('hello') << {  //注意我们是如何使用greeting的，没有通过extensioins
            println "${project.greeting.message} from ${project.greeting.greeter}"
        }
    }
}

class GreetingPluginExtension {
    String message
    String greeter
}
//调用插件
//1、apply plugin: GreetingPlugin

//--------------------------------------------